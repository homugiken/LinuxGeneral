
================================================================================
RULES
--------------------------------------------------------------------------------
target ... : prerequisites ...
	recipe
	...
	...

A target is usually the name of a file that is generated by a program; exmples
of targets are executable or object files. A target can also be the name of an
action to carry out, such as "clean".

A prerequisite (also called dependency) is a file that is used as input to create
the target. A target often depends on several files.

The recipe (also called system command(s)) is an action that make carries out.
A recipe may have more than one command, either on the same line or each on its
own line. You need to put a tab character at the beginning of every recipe line!

Usually a recipe is in a rule with prerequisites and serves to create a target
file if any of the prerequisites change. However, the rule that specifies a recipe
for the target need not have prerequisites. For example, the rule containing the
delete command associated with the target 'clean' does ont have prerequisites.

A rule explains how and when to remake certain files which are the targetds of the
particular rule. make carries out the recipe on the prerequisites to create or update
the target. A rule can also explain how and when to carry out an action.
--------------------------------------------------------------------------------

================================================================================
EXAMPLE
--------------------------------------------------------------------------------
edit: main.o kbd.o command.o display.o
    cc -o edit main.o kbd.o command.o display.o

main.o: main.c defs.h
    cc -c main.c
kbd.o: kbd.c defs.h command.h
    cc -c kbd.c
command.o: command.c defs.h command.h
    cc -c command.c
display.o: display.c defs.h
    cc -c display.c

clean:
     rm edit main.o kbd.o command.o display.o
--------------------------------------------------------------------------------

================================================================================
3. WRITING MAKEFILES
--------------------------------------------------------------------------------
3.1 WHAT MAKEFILES CONTAIN
--------------------------------------------------------------------------------
Makefiles contain five kind of things:
explicit rules, implicit rules, variable definitions, directives, and comments.

- An explicit rule says when and how to remake one or more files, called the
  rule's targets. It lists the other files that the targets depend on, called
  the prerequisites of the target, and may also give a recipe to use to create
  or update the targets.
- An implicit rule says when and how to remake a class of files based on their
  names. It describes how a target may depend on a file with a name similar to
  the target and gives a recipe to create or update such a target.
- A variable definition is a line that specifies a text string value for a
  variable that can be substituted into the text later.
- A directive is an instruction for make to do something special while reading
  the makefile.
  - Reading another makefile.
  - Deciding (based on the values of variables) whether to use or ignore a part
    of the makefile.
  - Defining a variable from a verbatim string containing multiple lines.
- '#' in a line of makefile starts a comment. It and the rest of the line are
  ignored, except that a trailing backslash not excaped by another backslash will
  continue the comment accross multiple lines.
--------------------------------------------------------------------------------
3.3 INCLUDING OTHER MAKEFILES
--------------------------------------------------------------------------------
include filenames ...

The include directive tells make to suspend reading the current makefile and
read one of more other makefiles before continuing.
When make processes an include directive, it suspends reading of the containing
makefile and reads from each listed file in turn. When that is finished, make
resumes reading the makefile in which the directive appears.
--------------------------------------------------------------------------------

================================================================================
4. WRITING RULES
--------------------------------------------------------------------------------
WILDCARD
--------------------------------------------------------------------------------
The wildcard characters in make are '*', '?' and '[...]'.
The character '~' at the beginning of a file name also has special significance.
If alone, or followed by a slash, it represents your home directory.

Wildcards can be used in the recipe of a rule.

clean:
	rm -r *.o

Wildcards are also useful in the prerequisites of a rule.

print: *.c
	lpr -r &?
	touch print
--------------------------------------------------------------------------------
